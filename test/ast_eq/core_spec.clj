(ns ast-eq.core-spec
  (:require [clojure.test :as t]
            [ast-eq.core :refer [ast=]]))

(defn *contains? [act exp]
  (clojure.set/subset? (set exp) (set act)))

(defn check-env [act state & [exp-env rejected-msg]]
  (t/is (*contains?
          act (merge {:state state}
                     (cond-> {}
                       exp-env (merge {:value {:env exp-env}})
                       rejected-msg (merge {:rejected/msg rejected-msg}))))))

(t/deftest AstEqCoreSpec
  (t/testing "ast="
    (t/testing "checks equality for literals"
      (check-env (ast= '(5 2)
                       '(5 2))
                 :accepted {}))
    (t/testing "meta-vars capture the value of its pair in the env"
      (check-env (ast= '(?x 5)
                       '(2  5))
                 :accepted {'?x 2})
      (t/testing "and will eval to that value"
        (check-env (ast= '(?x 3 ?x)
                         '(2  3 2))
                   :accepted {'?x 2})
        (check-env (ast= '(?x 3 ?x)
                         '(2  3 2))
                   :accepted {'?x 2}))
      (t/testing "meta-vars will throw an error if the paired value is incorrect"
        (check-env (ast= '(?x ?x)
                         '(2  3))
                   :rejected {'?x 2} [['?x 2] 3])))
    (t/testing "_'s will pass equality checks, ie: acts as a positional ignore"
      (check-env (ast= '(2 _)
                       '(2 \&))
                 :accepted {}))
    (t/testing "ast= works with nested seqs"
      (check-env (ast= '(some-> ?a (+ ?a) (/ ?a))
                       '(some-> 2  (+ 2)  (/ 2)))
                 :accepted {'?a 2})
      (check-env (ast= '(some-> ?b (+ ?b) (/ ?b))
                       '(some-> 2  (+ 3)  (/ 2)))
                 :rejected {'?b 2})
      (check-env (ast= '(some-> ?c (+ ?c) (/ ?c))
                       '(some-> 2  (+ 2)  (/ 3)))
                 :rejected {'?c 2}))
    (t/testing "checks coll types match"
      (check-env (ast= '(0 (1) [2])
                       '(0 (1) [2]))
                 :accepted)
      (check-env (ast= '(0 [1])
                       '(0 (1)))
                 :rejected)
      (check-env (ast= '(0 ... [1])
                       '(0 ... (1)))
                 :rejected))
    (t/testing "ast= works with ellipses '...'"
      (check-env (ast= '(0 ... 5)
                       '(0 1 2 3 4 5))
                 :accepted)
      (check-env (ast= '(0 ... 5)
                       '(0 5))
                 :accepted)
      (check-env (ast= '(0 ... 5)
                       '(0 1))
                 :rejected)
      (check-env (ast= '(0 ... 3 4)
                       '(0 1 2 3 0))
                 :rejected)
      (check-env (ast= '(0 ... 3)
                       '(0  1  2))
                 :rejected)
      (check-env (ast= '(0 ... 2)
                       '(0  1  2))
                 :accepted)
      (check-env (ast= '(0 ... 2 3)
                       '(0  2  3))
                 :accepted)
      (check-env (ast= '(0 1 2)
                       '(0 1 2 3))
                 :accepted)
      (check-env (ast= '(0 ... 2 3)
                       '(0  1  2))
                 :rejected)
      (check-env (ast= '(0 1 $)
                       '(0 1 2 3))
                 :rejected {} '[$ 2])
      (check-env (ast= '(0 ...)
                       '(0 1 2))
                 :rejected)
      (check-env (ast= '(... 0)
                       '(0 1 2))
                 :accepted)
      (check-env (ast= '(0 ... (3))
                       '(0  1  (2 3)))
                 :rejected)
      (check-env (ast= '(?x ... (?x))
                       '(3  1   (3)))
                 :accepted {'?x 3})
      (check-env (ast= '(?a ... (?a))
                       '(:a :b  (:c)))
                 :rejected {'?a :a} :ellipsis/rejected)
      (check-env (ast= '(?l ... ?l)
                       '(:l :m  :l))
                 :accepted {'?l :l})
      (check-env (ast= '(?d ... (?d 2) 7)
                       '(:d  :e (:d 3) 6))
                 :rejected {'?d :d} [2 3])
      (check-env (ast= '(?f ... (?f 2) 7)
                       '(:f  :g (:f 2) 6))
                 :rejected {'?f :f} [7 6])
      (check-env (ast= '(?h ... (  ) 7)
                       '(:h  :i (:h) 6))
                 :rejected {'?h :h}
                 :ellipsis/rejected)
      (check-env (ast= '(?j ... (:any) 7)
                       '(:j  :k (    ) 6))
                 :rejected {'?j :j}
                 :ellipsis/rejected))))
